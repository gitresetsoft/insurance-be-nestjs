generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  firstName   String
  lastName    String
  password    String?       // Optional for Google OAuth users
  googleId    String?       @unique // For Google OAuth users
  role        UserRole      @default(user)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastLogin   DateTime?     // Track last login
  avatar      String?
  policies    Policy[]
  claims      Claim[]
}

enum UserRole {
  user
  admin
}

model InsuranceProduct {
  id              String        @id @default(uuid())
  name            String
  type            PolicyType
  description     String
  basePrice       Float
  coverageDetails String
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  policies        Policy[]
}

model Policy {
  id                String           @id @default(uuid())
  policyNumber      String           @unique
  status            PolicyStatus     @default(ACTIVE)
  startDate         DateTime
  endDate           DateTime
  premium           Float
  coverageLimit     Float
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  insuranceProductId String
  insuranceProduct  InsuranceProduct @relation(fields: [insuranceProductId], references: [id])
  claims            Claim[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum PolicyType {
  CAR
  HOME
  HEALTH
  LIFE
  TRAVEL
  BUSINESS
}

enum PolicyStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

model Claim {
  id           String      @id @default(uuid())
  claimNumber  String      @unique
  description  String
  amount       Float
  status       ClaimStatus @default(SUBMITTED)
  filingDate   DateTime    @default(now())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  policyId     String
  policy       Policy      @relation(fields: [policyId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum ClaimStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  CLOSED
}

model Billing {
  id           String   @id @default(uuid())
  userId       String
  productCode  String
  location     String
  premiumPaid  Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([productCode, location])
}